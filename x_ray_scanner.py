import os
from argparse import ArgumentParser

from dotenv import load_dotenv
from tqdm import tqdm
from web3 import Web3

# --- –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–∫–∞–Ω–µ—Ä–∞ ---
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def initialize_node_link():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–∏–Ω–∫ —Å –Ω–æ–¥–æ–π Ethereum —á–µ—Ä–µ–∑ Infura."""
    load_dotenv()
    infura_project_id = os.getenv("INFURA_PROJECT_ID")
    if not infura_project_id or infura_project_id == "YOUR_INFURA_PROJECT_ID_HERE":
        print(f"{Colors.FAIL}–°–±–æ–π —Å–≤—è–∑–∏: INFURA_PROJECT_ID –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.{Colors.ENDC}")
        print(f"–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª {Colors.BOLD}.env{Colors.ENDC} —Å –≤–∞—à–∏–º –∫–ª—é—á–æ–º –¥–æ—Å—Ç—É–ø–∞.")
        print("–§–æ—Ä–º–∞—Ç: INFURA_PROJECT_ID=\"abcdef1234567890\"")
        return None
    
    w3 = Web3(Web3.HTTPProvider(f'https://mainnet.infura.io/v3/{infura_project_id}'))
    
    if not w3.is_connected():
        print(f"{Colors.FAIL}–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏ Ethereum.{Colors.ENDC}")
        return None
        
    print(f"{Colors.GREEN}–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é Ethereum —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.{Colors.ENDC}")
    return w3

def perform_xray_scan(w3, contract_address, num_blocks):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç X-Ray —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–æ–≤—ã—Ö "–±–∏–æ-—Å–∏–≥–Ω–∞—Ç—É—Ä".
    """
    try:
        target_address = w3.to_checksum_address(contract_address)
    except ValueError:
        print(f"{Colors.FAIL}–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –æ–±—ä–µ–∫—Ç–∞.{Colors.ENDC}")
        return

    latest_block_number = w3.eth.block_number
    start_block = latest_block_number - num_blocks + 1

    print(f"\n{Colors.HEADER}{Colors.BOLD}üî¨ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ö—Ä–∏–ø—Ç–æ–Ω–∏–∞–Ω—Å–∫–æ–≥–æ X-Ray –°–∫–∞–Ω–µ—Ä–∞...{Colors.ENDC}")
    print(f"üéØ {Colors.CYAN}–¶–µ–ª–µ–≤–æ–π –æ–±—ä–µ–∫—Ç:{Colors.ENDC} {target_address}")
    print(f" SCANNING_DEPTH  SCANNING_DEPTH_IN_BLOCKS{Colors.CYAN}–ì–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:{Colors.ENDC} {num_blocks} –±–ª–æ–∫–æ–≤ (—Å {start_block} –ø–æ {latest_block_number})")
    
    detected_signatures = set()
    total_interactions = 0

    pbar = tqdm(range(start_block, latest_block_number + 1), 
                desc=f"{Colors.BLUE}–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–æ–≤{Colors.ENDC}",
                ncols=100)

    for block_num in pbar:
        try:
            block = w3.eth.get_block(block_num, full_transactions=True)
            for tx in block.transactions:
                if tx['to'] and w3.to_checksum_address(tx['to']) == target_address:
                    total_interactions += 1
                    # –ö–∞–∂–¥–∞—è "–±–∏–æ-—Å–∏–≥–Ω–∞—Ç—É—Ä–∞" - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                    signature = w3.to_checksum_address(tx['from'])
                    detected_signatures.add(signature)
        except Exception as e:
            tqdm.write(f"{Colors.WARNING}–ê–Ω–æ–º–∞–ª–∏—è –≤ —Å–µ–∫—Ç–æ—Ä–µ {block_num}: {e}{Colors.ENDC}")
            continue

    # --- –í–´–ß–ò–°–õ–ï–ù–ò–ï –ú–ï–¢–†–ò–ö ---
    total_unique_signatures = len(detected_signatures)
    
    # –°–∏–º—É–ª—è—Ü–∏—è. "–ù–æ–≤—ã–µ" —Å–∏–≥–Ω–∞—Ç—É—Ä—ã - —ç—Ç–æ –≤—Å–µ, —á—Ç–æ –º—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –≤ —ç—Ç–æ–º —Å–∫–∞–Ω–µ.
    # –í –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –º—ã –±—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–ª–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞—Ç—É—Ä.
    known_signatures_db = set() 
    new_signatures = detected_signatures - known_signatures_db
    
    # –ù–∞—à–∞ –∫–ª—é—á–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞!
    bio_signature_index = (len(new_signatures) / total_unique_signatures) * 100 if total_unique_signatures > 0 else 0

    # --- –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ---
    print(f"\n{Colors.HEADER}{Colors.BOLD}üß¨ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ë–∏–æ-–°–∏–≥–Ω–∞—Ç—É—Ä:{Colors.ENDC}")
    print("=" * 60)
    print(f"–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –æ–±—ä–µ–∫—Ç–æ–º: {Colors.BOLD}{Colors.GREEN}{total_interactions}{Colors.ENDC}")
    print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∏–æ-—Å–∏–≥–Ω–∞—Ç—É—Ä: {Colors.BOLD}{Colors.GREEN}{total_unique_signatures}{Colors.ENDC}")
    
    print(f"\n{Colors.HEADER}{Colors.UNDERLINE}–ö–ª—é—á–µ–≤–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å Kryptonian:{Colors.ENDC}")
    print(f"üî• {Colors.WARNING}–ò–Ω–¥–µ–∫—Å –ë–∏–æ-–°–∏–≥–Ω–∞—Ç—É—Ä (Bio-Signature Index):{Colors.ENDC} "
          f"{Colors.BOLD}{bio_signature_index:.2f}%{Colors.ENDC}")
    print(f"   {Colors.WARNING}(–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–æ–≤—ã—Ö, —Ä–∞–Ω–µ–µ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞—Ç—É—Ä –≤ –æ–±—â–µ–º –ø–æ—Ç–æ–∫–µ){Colors.ENDC}")
    print("=" * 60)
    
    if bio_signature_index > 85:
         print(f"{Colors.GREEN}–í–ï–†–î–ò–ö–¢: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –º–∞—Å—Å–∞! –û–±–Ω–∞—Ä—É–∂–µ–Ω —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏—Ç–æ–∫ –Ω–æ–≤—ã—Ö –±–∏–æ-—Å–∏–≥–Ω–∞—Ç—É—Ä.{Colors.ENDC}")
    elif bio_signature_index > 50:
        print(f"{Colors.CYAN}–í–ï–†–î–ò–ö–¢: –û–±–Ω–∞—Ä—É–∂–µ–Ω —É—Å—Ç–æ–π—á–∏–≤—ã–π —Å–∏–≥–Ω–∞–ª. –ü—Ä–æ–µ–∫—Ç –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–≤—ã–µ —Ñ–æ—Ä–º—ã –∂–∏–∑–Ω–∏.{Colors.ENDC}")
    else:
        print(f"{Colors.BLUE}–í–ï–†–î–ò–ö–¢: –°—Ç–∞–±–∏–ª—å–Ω–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —è–¥—Ä–æ–º –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞—Ç—É—Ä.{Colors.ENDC}")


if __name__ == "__main__":
    parser = ArgumentParser(description="Kryptonian - X-Ray —Å–∫–∞–Ω–µ—Ä –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ä–æ—Å—Ç–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.")
    parser.add_argument("contract", help="–ê–¥—Ä–µ—Å —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (—Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞) –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
    parser.add_argument("-b", "--blocks", type=int, default=1000, help="–ì–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±–ª–æ–∫–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1000).")
    
    args = parser.parse_args()
    
    node_link = initialize_node_link()
    if node_link:
        perform_xray_scan(node_link, args.contract, args.blocks)
